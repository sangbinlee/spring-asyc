package topas;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.boot.CommandLineRunner;
import org.springframework.scheduling.annotation.Async;
import org.springframework.stereotype.Component;

import lombok.extern.slf4j.Slf4j;
import topas.service.async.AsyncService;

import java.util.concurrent.CompletableFuture;
@Slf4j
@Component
public class AppRunner implements CommandLineRunner {

    private static final Logger logger = LoggerFactory.getLogger(AppRunner.class);

    private final GitHubLookupService gitHubLookupService;

    public AppRunner(GitHubLookupService gitHubLookupService) {
        this.gitHubLookupService = gitHubLookupService;
    }

    @Override
    public void run(String... args) throws Exception {

        

        /**
         * TODO 비동기 통신
         * 
			요청이 긴 경우 - API 통신
			로그 처리			- API LOG
			푸시 처리
         */
        // Start the clock
        long start = System.currentTimeMillis();
        logger.info("@Async call .........--> " + "[start]"+start);
        

//		for (int i = 1; i <= 501; i++) {
//			log.info(" @Async 쓰레드 번호= " +i); 

	        // Kick of multiple, asynchronous lookups
	        CompletableFuture<User> page1 = gitHubLookupService.findUser("PivotalSoftware");
	        CompletableFuture<User> page2 = gitHubLookupService.findUser("CloudFoundry");
	        CompletableFuture<User> page3 = gitHubLookupService.findUser("Spring-Projects");

//		}
        
        
        logger.info("@Async call .........--> " + "[end]");
        
        // Wait until they are all done
        CompletableFuture.allOf(page1,page2,page3).join();

        // Print results, including elapsed time
        logger.info("Elapsed time: " + (System.currentTimeMillis() - start));

        logger.info("@Async 결과 .........--> " + "[start]");
        logger.info("--> " + page1.get());
        logger.info("--> " + page2.get());
        logger.info("--> " + page3.get());
        logger.info("@Async 결과 .........--> " + "[end]");

    }

}
